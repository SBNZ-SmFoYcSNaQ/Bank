package rules.transactions;

import riders.bank.model.Transaction;
import riders.bank.model.BankAccount;
import riders.bank.utils.helpers.TransactionsHelper;
import java.util.List;
import java.lang.Boolean;

global riders.bank.model.Transaction specificTransaction;
global riders.bank.model.Client specificClient;
global java.util.ArrayList<String> suspiciousMessages;

rule "Rule [Many transactions from different locations in close time]"
salience 50
no-loop true
when
    $transaction: Transaction(id == specificTransaction.getId())
    $otherTransactions: List(size > 0) from collect(Transaction(id != specificTransaction.getId()))
    $userTransactions: List(size > 0) from collect(Transaction() from TransactionsHelper.getClientTransactions($otherTransactions, specificClient.getId()))
    $closeTimeTransactions: List(size > 0) from collect(Transaction() from TransactionsHelper.getTimeCloseTransactions($userTransactions, $transaction))
    $longDistanceCloseTimeTransactions: List(size > 0) from collect(Transaction() from TransactionsHelper.getLongDistanceTransactions($closeTimeTransactions, $transaction))
then
    System.out.println("Rule [Many transactions from different locations in close time] - fired");
    suspiciousMessages.add("Many transactions from different locations in close time.");
end;

rule "Rule [Many small transactions in close time]"
salience 45
no-loop true
when
    $transaction: Transaction(id == specificTransaction.getId())
    $otherTransactions: List(size > 0) from collect(Transaction(id != specificTransaction.getId()))
    $userTransactions: List(size > 0) from collect(Transaction() from TransactionsHelper.getClientTransactions($otherTransactions, specificClient.getId()))
    $manySmallTransactions: List(size > 5) from collect(Transaction() from TransactionsHelper.getSmallTransactions($userTransactions))
then
    System.out.println("Rule [Many small transactions in close time] - fired");
    suspiciousMessages.add("Many small transactions in close time.");
end;

rule "Rule [Transactions from new location]"
salience 40
no-loop true
when
    $transaction: Transaction(id == specificTransaction.getId())
    $otherTransactions: List(size > 0) from collect(Transaction(id != specificTransaction.getId()))
    $userTransactions: List(size > 0) from collect(Transaction() from TransactionsHelper.getClientTransactions($otherTransactions, specificClient.getId()))
    $isFromNewLocation: Boolean() from TransactionsHelper.isTransactionFromNewLocations($userTransactions, $transaction.getLocation())
    eval($isFromNewLocation == true)
then
    System.out.println("Rule [Transactions from new location] - fired");
    suspiciousMessages.add("Transaction from new location.");
end;

rule "Rule [Big transaction in odd time]"
salience 35
no-loop true
when
    $transaction: Transaction(id == specificTransaction.getId())
    $isOddTransaction: Boolean() from TransactionsHelper.isTransactionOdd($transaction)
    eval($isOddTransaction == true)
then
    System.out.println("Rule [Big transaction in odd time] - fired");
    suspiciousMessages.add("Transaction is big and in odd time.");
end;

rule "Rule [Oddly big transaction than usually]"
salience 30
no-loop true
when
    $transaction: Transaction(id == specificTransaction.getId())
    $otherTransactions: List(size > 0) from collect(Transaction(id != specificTransaction.getId()))
    $userTransactions: List(size > 0) from collect(Transaction() from TransactionsHelper.getClientTransactions($otherTransactions, specificClient.getId()))
    $meanTransactionAmount: Double() from TransactionsHelper.getMeanTransactionAmount($userTransactions)
    eval($meanTransactionAmount > $transaction.getAmount() * 2)
then
    System.out.println("Rule [Oddly big transaction than usually] - fired");
    suspiciousMessages.add("Transaction is much larger than average.");
end;

